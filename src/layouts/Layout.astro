---
import "@fontsource/inconsolata/900.css"; // Specify weight

interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-gray-800">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no" />
		<link rel="icon" type="image/x-icon" href="/favicon.ico" />
		<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png">
		<link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png">
		<link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png">
		<link rel="manifest" href="/site.webmanifest">
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>	
		<link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:ital,wght@0,700;1,700&display=swap" rel="stylesheet">
		<style is:global>
			.font-scripture {
				font-family: "Inconsolata";
				word-spacing: -4px;
				letter-spacing: normal;
				@apply text-4xl max-sm:text-3xl;
			}

			.font-scripture-serif {
				font-family: 'IBM Plex Mono', monospace;
				font-style: italic;
				word-spacing: -8px;
				letter-spacing: -2px;
				@apply text-4xl max-sm:text-3xl;
			}

			[x-cloak] {
				@apply hidden;
			}
		</style>
		<script>
			if ('serviceWorker' in navigator) {
				navigator
					.serviceWorker
					.register('/service-worker.js')
				
				// Use serviceWorker.ready to ensure that you can subscribe for push
				navigator.serviceWorker.ready.then((serviceWorkerRegistration) => {
					const options = {
						userVisibleOnly: true,
						applicationServerKey: "BCWhyz_ReqLr3lA_dUjrtyHAEJ-LnNPoI-zOdutLHnKnpb9LYVbbox13YlovUIadeyMfq7RWE3fUz0sVfEGokqA"
					};

					serviceWorkerRegistration.pushManager.subscribe(options).then(
						(pushSubscription) => {
							console.log(pushSubscription.endpoint);
							// The push subscription details needed by the application
							// server are now available, and can be sent to it using,
							// for example, the fetch() API.

							// Send the push notification to the user now
							
						},
						(error) => {
							// During development it often helps to log errors to the
							// console. In a production environment it might make sense to
							// also report information about errors back to the
							// application server.
							console.error(error);
						},
					);
				});
			}
		</script>
	</head>
	<body>
		<slot />
	</body>
</html>

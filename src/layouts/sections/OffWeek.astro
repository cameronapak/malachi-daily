---
import PoppyVacationSvg from '../../components/astro/illustration/poppy-vacation.astro';
import { getAllVerses, verseTableHeaders } from "../../api/verses";
import { books, type BookName } from '../../api/bible/static/books';

const nowAndPastVersesFromApi = await getAllVerses({
    filters: JSON.stringify({
        filter_type: "AND",
        filters: [
            { type: "boolean", field: verseTableHeaders.pastStartDate, value: "1" },
        ],
        groups: [],
    }),
    // The minus up front tells the API to order by the descending order.
    orderBy: '-' + verseTableHeaders.startDate,
    size: 100
});

const { nextVerseComesInDays = 0, } = Astro.props;
---

<section class="gap-4 w-full flex flex-col items-center">
    <div x-show="!hasPreviewVerse" class="gap-4 w-full flex flex-col items-center">
        <div class="text-primary w-full max-w-[250px] tooltip tooltip-top" data-tip="Illustration source: popsy.co">
            <PoppyVacationSvg />
        </div>
        <div class="flex flex-col gap-1">
            <h2 class="text-2xl text-primary font-bold">It's an Off Week</h2>
            <p class="text-muted whitespace-nowrap inline" x-text="daysUntilNextVerse + ' days until next verse'">
                -
            </p>
        </div>
    </div>
    <select
        id="select-previous-verse"
        class="select mt-4 btn-filled-contrast !btn-md !pr-10 w-fit"
    >
        <option disabled selected>Review a Past Verse</option>
        {nowAndPastVersesFromApi.results.map((verse: any) => {
            const book = verse[verseTableHeaders.book];
            const bookName = book.value as BookName;
            const bookId = books[bookName]?.bookid;

            if (!bookId) {
                return;
            }

            return (
                <option 
                    data-book-id={bookId} 
                    data-chapter={verse[verseTableHeaders.chapter]} 
                    data-start-verse={verse[verseTableHeaders.verseNumberStart]} 
                    data-end-verse={verse[verseTableHeaders.verseNumberEnd]}
                    data-book-name={bookName}
                >
                    {verse[verseTableHeaders.passageNumber]}.{' '}{verse[verseTableHeaders.readableVerseRef] || ''}
                </option>
            )
        })}
    </select>
</section>

<script>
    import { fetchAndCache } from '../../api';
    import { type bibleVersion } from '../../api/bible/static/books.ts';
    import { setAlpineState } from '../../utils';

    async function getSelectedVerse({
        bookId,
        chapter,
        verseNum,
        verseNumEnd,
    } : {
        bookId: number,
        chapter: number,
        verseNum: number,
        verseNumEnd: number,
    }) : Promise<{ [key in bibleVersion]: string; }> {
        let verseNums: number[] = [];
        verseNums.push(verseNum);
        if (verseNumEnd && verseNum < verseNumEnd) {
            for (let i = verseNum + 1; i <= verseNumEnd; i++) {
                verseNums.push(i);
            }
        }

        const fetchUrl = '/api/verses?' + new URLSearchParams({
            bookId: bookId.toString(),
            chapter: chapter.toString(),
            verses: verseNums.join(','),
        });

        let verses;
        try {
            verses = await fetchAndCache({
                url: fetchUrl,
                cacheKey: fetchUrl
            });
        } catch (error) {
            throw new Error(
                'Could not find the following verse: ' + 
                JSON.stringify({
                    bookId: bookId.toString(),
                    chapter: chapter.toString(),
                    verses: verseNums.join(','),
                }, null, 2)
            )
        }

        return verses;
    }

    const selectInputEl: HTMLSelectElement = document.getElementById('select-previous-verse') as HTMLSelectElement;
    
    if (Boolean(selectInputEl)) {
        selectInputEl.addEventListener('change', async () => {
            const { bookId, chapter, startVerse, endVerse, bookName = '' } = selectInputEl.selectedOptions[0].dataset;

            const verses = await getSelectedVerse({
                bookId: Number(bookId),
                chapter: Number(chapter),
                verseNum: Number(startVerse),
                verseNumEnd: Number(endVerse || 0)
            });

            // Add the verses to the versesObj in AlpineJS.
            setAlpineState('versesObj', verses);
            setAlpineState('scriptureRef', `${bookName} ${chapter}:${startVerse}${endVerse ? `-${endVerse}` : ''}`);
            setAlpineState('bookName', bookName);
            setAlpineState('chapter', Number(chapter));
            setAlpineState('hasPreviewVerse', true);
        });
    }
</script>

---
import PoppyVacationSvg from '../../components/astro/illustration/poppy-vacation.astro';
import { getAllVerses, verseTableHeaders } from "../../api/verses";
import { books, type BookName, type Book } from '../../api/bible/static/books';

const nowAndPastVersesFromApi = await getAllVerses({
    filters: JSON.stringify({
        filter_type: "AND",
        filters: [
            { type: "boolean", field: verseTableHeaders.pastStartDate, value: "1" },
        ],
        groups: [],
    }),
    // The minus up front tells the API to order by the descending order.
    orderBy: '-' + verseTableHeaders.startDate,
    size: 100
});

const { nextVerseComesInDays = 0, } = Astro.props;
---

<section class="gap-4 w-full flex flex-col items-center">
    <div class="text-primary w-full max-w-[250px] tooltip tooltip-top" data-tip="Illustration source: popsy.co">
        <PoppyVacationSvg />
    </div>
    <div class="flex flex-col gap-1">
        <h2 class="text-2xl text-primary font-bold">It's an Off Week</h2>
        <p class="text-muted whitespace-nowrap inline" x-text=`${nextVerseComesInDays} + ' days until next verse'`>
            -
        </p>
    </div>
    <select
        id="select-previous-verse"
        class="select mt-4 btn-filled-contrast !btn-md !pr-10 w-fit"
    >
        <option disabled selected>Review a Past Verse</option>
        {nowAndPastVersesFromApi.results.map((verse: any) => {
            const book = verse[verseTableHeaders.book];
            const bookId = books[book.value as BookName]?.bookid;

            if (!bookId) {
                return;
            }

            return (
                <option data-book-id={bookId} data-chapter={verse[verseTableHeaders.chapter]} data-start-verse={verse[verseTableHeaders.verseNumberStart]} data-end-verse={verse[verseTableHeaders.verseNumberEnd]}>
                    {verse[verseTableHeaders.passageNumber]}.{' '}{verse[verseTableHeaders.readableVerseRef] || ''}
                </option>
            )
        })}
    </select>
</section>

<script>
    import { fetchAndCache } from '../../api';
    
    async function getSelectedVerse({
        bookId,
        chapter,
        verseNum,
        verseNumEnd,
    }) {
        let verseNums: number[] = [];
        verseNums.push(verseNum);
        if (verseNumEnd && verseNum < verseNumEnd) {
            for (let i = verseNum + 1; i <= verseNumEnd; i++) {
                verseNums.push(i);
            }
        }

        const fetchUrl = '/api/verses?' + new URLSearchParams({
            bookId: bookId.toString(),
            chapter: chapter.toString(),
            verses: verseNums.join(','),
        });

        console.log(fetchUrl)

        const verses = await fetchAndCache({
            url: fetchUrl,
            cacheKey: fetchUrl
        });

        console.log(verses)

        return verses;
    }

    const selectInputEl = document.getElementById('select-previous-verse')
    selectInputEl.addEventListener('change', async (event) => {
        const { bookId, chapter, startVerse, endVerse } = event.target.selectedOptions[0].dataset;
        console.log(event.target.selectedOptions[0].dataset)
        const verses = await getSelectedVerse({
            bookId: Number(bookId),
            chapter: Number(chapter),
            verseNum: Number(startVerse),
            verseNumEnd: Number(endVerse || 0)
        });
    });
</script>
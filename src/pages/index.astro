---
import { Image } from "astro:assets";

import Layout from "../layouts/Layout.astro";
import logoImgUrl from "../../public/logo.png";
import { backupVerse } from "../utils/constants";
import NativeFeelingDrawer from "../components/react/NativeFeelingDrawer";
import SectionLinks from "../components/astro/SectionLinks/index.astro";
import {
	type BibleVersesFromMultipleTranslations,
	getBibleVersesFromMultipleTranslations,
} from "../api/bible";
import {
	books,
	type BookName,
	type bibleVersion,
	selectedBibleVersions,
	bibleVersionData,
} from "../api/bible/static/books";
import { getAllVerses } from "../api/verses";

const urlSearchParams = Astro.url.searchParams;
const searchParamBook = urlSearchParams.get("book");
const searchParamChapter = urlSearchParams.get("chapter");
const searchParamStartVerse = urlSearchParams.get("start-verse");
const searchParamEndVerse = urlSearchParams.get("end-verse");
let verseToUse;
const getVerseFromUrlParams = Boolean(
	searchParamBook && searchParamChapter && searchParamStartVerse,
);

let errorText = "";
let infoText = "";
let whenIsNextVerse = "";

if (getVerseFromUrlParams) {
	// Return the verse from the params...
	verseToUse = {
		Book: {
			value: searchParamBook,
		},
		Chapter: searchParamChapter,
		"Verse Number Start": searchParamStartVerse,
		"Verse Number End": searchParamEndVerse,
	};
} else {
	// Nope, let's get the verse from the API!
	try {
		// This will get the most recent verse from the API that's live.
		const nowAndPastVersesFromApi = await getAllVerses({
			filters: JSON.stringify({
				filter_type: "AND",
				filters: [
					{ type: "boolean", field: "Past Start Date", value: "1" },
				],
				groups: [],
			}),
			// The minus up front tells the API to order by the descending order.
			orderBy: "-Start Date",
			size: 1,
		});

		// This will get and cache the latest verses fom the API.
		const futureVersesFromApi = await getAllVerses({
			filters: JSON.stringify({
				filter_type: "AND",
				filters: [
					{ type: "boolean", field: "Past Start Date", value: "0" },
				],
				groups: [],
			}),
			orderBy: "Start Date",
			size: 2,
		});

		function getMostCurrentVerse() {
			const firstVerseFromApi = nowAndPastVersesFromApi.results[0];

			const firstFutureVerseFromApi = futureVersesFromApi.results[0];
			const secondFutureVerseFromApi =
				futureVersesFromApi.results?.[1] || null;

			const firstFutureVerseStartTime =
				new Date(firstFutureVerseFromApi["Start Date"]).getTime() /
				1000;
			const secondFutureVerseStartTime = secondFutureVerseFromApi
				? new Date(secondFutureVerseFromApi["Start Date"]).getTime() /
				  1000
				: null;

			let isFutureVerseActuallyNow =
				firstFutureVerseStartTime >= Date.now();

			// This could happen due to cacheing, because I have a 1 day cache on most API calls.
			if (
				isFutureVerseActuallyNow &&
				(secondFutureVerseStartTime
					? secondFutureVerseStartTime <= Date.now()
					: false)
			) {
				whenIsNextVerse = secondFutureVerseFromApi["Start Date"];
				return secondFutureVerseFromApi;
			} else if (isFutureVerseActuallyNow) {
				whenIsNextVerse = firstFutureVerseFromApi["Start Date"];
				return firstFutureVerseFromApi;
			} else {
				whenIsNextVerse = firstFutureVerseFromApi["Start Date"];
				return firstVerseFromApi;
			}
		}

		verseToUse = getMostCurrentVerse();
	} catch (error) {
		errorText = "An error occured. Returning backup verse: Matthew 4:4";
		verseToUse = backupVerse;
	}
}

function getDiffBetweenDays() {
	if (!whenIsNextVerse) {
		return 0;
	}

	const date1 = new Date();
	const date2 = new Date(whenIsNextVerse);
	const diffTime: number = Math.abs(date2.getTime() - date1.getTime());
	const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
	return diffDays;
}

const nextVerseComesInDays = getDiffBetweenDays() || 0;
const translation: bibleVersion = "NLT";
const bookName: BookName = verseToUse.Book.value;
const bookId = books[bookName].bookid;
const chapter = Number(verseToUse.Chapter);
const verseNum = Number(verseToUse["Verse Number Start"]);
const verseNumEnd = Number(verseToUse["Verse Number End"]);

// Allow user to get multiple verses at once
const verseNums: number[] = [];
verseNums.push(verseNum);
if (verseNumEnd && verseNum < verseNumEnd) {
	for (let i = verseNum + 1; i <= verseNumEnd; i++) {
		verseNums.push(i);
	}
}

// Anytime there's a new passage for Malachi Daily, this will increment by one.
const passageNum = verseToUse["Passage Number"] || "0";

let verseRef = `${bookName} ${chapter}:${verseNum}${
	verseNumEnd ? `-${verseNumEnd}` : ""
}`;

let verses: BibleVersesFromMultipleTranslations = {};

if (getVerseFromUrlParams) {
	infoText = `Showing verse from URL Params: ${verseRef}`;
}
try {
	verses = await getBibleVersesFromMultipleTranslations({
		bookId: bookId,
		chapter,
		verses: verseNums,
		translations: selectedBibleVersions,
	});
} catch (error) {
	// User backup verse, instead.
	errorText = `${verseRef} cannot be found. Returning Matthew 4:4`;
	verses = await getBibleVersesFromMultipleTranslations({
		bookId: books["Matthew"].bookid,
		chapter: 4,
		verses: [4],
		translations: selectedBibleVersions,
	});
	verseRef = "Matthew 4:4";
}

const scriptureText = verses[translation];
const scriptureRef = verseRef;
---

<Layout title="Malachi Daily: Memorize Bible Verses & Learn Their Context">
	<style is:global>
		.surface-primary {
			@apply bg-white dark:bg-gray-700;
		}

		.checkbox {
			@apply dark:border-gray-500;
		}

		.canvas-secondary {
			@apply bg-gray-100 dark:bg-gray-800;
		}

		.canvas-tertiary {
			@apply bg-gray-200 dark:bg-gray-700;
		}

		.text-muted {
			@apply text-gray-500 dark:text-gray-400;
		}

		.text-primary {
			@apply text-gray-800 dark:text-gray-100;
		}

		.thin-line {
			@apply border-gray-200 dark:border-gray-700;
		}

		html:not(.dark) .text-beautiful-gradient {
			@apply bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-700;
		}

		html.dark .text-beautiful-gradient {
			@apply text-gray-300;
		}

		html.dark .range {
			--range-shdw: 217 19% 27%;
		}

		.safe-area-bottom-padding {
			padding-block-end: env(
				safe-area-inset-bottom,
				16px
			);
		}

		.safe-area-bottom-padding-extra {
			padding-block-end: calc(env(
				safe-area-inset-bottom,
				16px
			) + 1rem);
		}
	</style>
	<div
		class="canvas-secondary"
		x-init={`
			versesObj = ${JSON.stringify(verses)};
			bibleVersionData = ${JSON.stringify(bibleVersionData)};
			notificationAlert = '${errorText}';
			notificationInfo = '${infoText}';
			passageNum = ${passageNum};
			bookName = '${bookName}';
			chapter = ${chapter};
		`.trim()}
		x-clear
		vaul-drawer-wrapper=""
	>
		<main
			class="w-screen h-auto min-h-[calc(100vh-52px)] px-6 flex flex-col items-center"
			x-bind:class="{ 'min-h-screen': isFullscreen }"
		>
			<div
				class="p-6 rounded-xl canvas-tertiary max-w-[600px] w-full"
				x-show="showDebug"
				x-transition
				x-cloak
			>
				<p class="text-muted">Your Firebase Cloud Messaging Token:</p>
				<p
					x-text="$data.firebaseCMToken || 'No token available. Try requesting notification acccess.'"
					class="select-all font-mono text-primary font-medium text-start break-all"
				>
				</p>
			</div>
			<div
				class="max-w-[600px] w-full flex flex-col py-12 max-sm:py-6 gap-12 max-sm:gap-6"
			>
				<!-- LOGO -->
				<div
					class="w-full flex flex-col gap-2 items-start justify-start"
				>
						<a
							x-cloak
							x-show="!passageNum"
							class="mb-4 whitespace-nowrap badge canvas-tertiary text-primary py-3 dark:border-gray-700"
							href="/"
						>
							Go back to Main Verse
						</a>
					<div class="w-full flex gap-2 justify-between">
						<div
							x-data={`{ clickCount: 0}`}
							x-on:click={`
								clickCount += 1;
								if (clickCount >= 10) {
									showDebug = true;
								}
							`.trim()}
							x-clear
							class="flex gap-2 items-center justify-start"
						>
							<Image
								src={logoImgUrl}
								alt="Malachi Daily Logo | shows hands praying"
								class={`aspect-[${logoImgUrl.height}/${logoImgUrl.width}] h-[32px] w-fit`}
							/>
							<h2
								class="max-sm:text-xl text-3xl text-primary font-bold line-clamp-2 text-ellipsis overflow-hidden"
								x-text="showDebug ? 'Malachi Daily (Debug)' : 'Malachi Daily'"
							>
								Malachi Daily
							</h2>
						</div>
						<!-- Settings and Notifications -->
						<div class="flex gap-4 items-center">
							<!-- Share Icon -->
							<button title="Share Malachi Daily">
								<svg
									class="text-muted flex-shrink-0"
									width="24"
									height="24"
									viewBox="0 0 24 24"
									xmlns="http://www.w3.org/2000/svg"
									x-on:click={`
										const title = document.title;
										const url = document.querySelector('link[rel=canonical]') ? document.querySelector('link[rel=canonical]').href : document.location.href;
										
										if (navigator?.share) {
											navigator.share({
												title,
												url
											})
										} else {
											// Copy the url to the clipboard
											navigator.clipboard.writeText(url);
											notificationInfo = 'URL copied to clipboard';
										};
									`.trim()}
								>
									<path
										fill="none"
										stroke="currentColor"
										stroke-linecap="round"
										stroke-linejoin="round"
										stroke-width="2"
										d="M12 5v8.5M15 7l-3-3l-3 3m-4 5v5a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2v-5"
									></path>
								</svg>
							</button>
							<!-- Notifications Icon -->
							<button
								x-show="!isSubscribedToNotifications"
								x-cloak
								title="Subscribe to Notifications"
							>
								<svg
									x-on:click="handleAskForNotificationPermissions"
									x-data="{ showAnimation: true }"
									x-init="setTimeout(() => showAnimation = false, 2500)"
									x-transition
									x-bind:class="{ 'animate-bounce': showAnimation && !isSubscribedToNotifications }"
									role="button"
									class="text-muted flex-shrink-0"
									width="24"
									height="24"
									viewBox="0 0 256 256"
									xmlns="http://www.w3.org/2000/svg"
								>
									<path
										fill="currentColor"
										d="M225.29 165.93C216.61 151 212 129.57 212 104a84 84 0 0 0-168 0c0 25.58-4.59 47-13.27 61.93a20.08 20.08 0 0 0-.07 20.07A19.77 19.77 0 0 0 48 196h36.18a44 44 0 0 0 87.64 0H208a19.77 19.77 0 0 0 17.31-10a20.08 20.08 0 0 0-.02-20.07ZM128 212a20 20 0 0 1-19.6-16h39.2a20 20 0 0 1-19.6 16Zm-73.34-40C63.51 154 68 131.14 68 104a60 60 0 0 1 120 0c0 27.13 4.48 50 13.33 68Z"
									></path>
								</svg>
							</button>
							<NativeFeelingDrawer client:idle>
								<div class="flex flex-col gap-2">
									<div
										class="form-control w-full max-w-xs mb-2"
									>
										<label class="label">
											<span
												class="label-text text-primary"
												>Select your preferred Bible
												translation</span
											>
										</label>
										<select
											class="select select-bordered dark:bg-gray-700 text-primary"
											x-model="bibleVersionPreference"
											x-on:change="localStorage.setItem('bibleVersionPreference', JSON.stringify($el.value));"
										>
											{
												selectedBibleVersions.map(
													(bibleVersion) => (
														<option
															value={bibleVersion}
															x-bind:selected={`'${bibleVersion}' === bibleVersionPreference`}
														>
															{bibleVersionData?.[
																bibleVersion
															]?.readableName ||
																bibleVersion}
														</option>
													),
												)
											}
										</select>
									</div>
									<div class="form-control w-fit">
										<label
											class="label cursor-pointer flex gap-2 items-center"
										>
											<input
												x-model="isDarkMode"
												type="checkbox"
												checked="checked"
												class="checkbox"
												x-on:click=`
													localStorage.setItem('isDarkMode', JSON.stringify($el.checked));
													toggleDarkMode();
												`
											/>
											<span
												class="label-text text-primary"
												>Enable Dark Mode</span
											>
										</label>
									</div>
									<div class="form-control w-fit">
										<label
											class="label cursor-pointer flex gap-2 items-center"
											for="show-first-letter"
										>
											<input
												x-model="showFirstLetter"
												type="checkbox"
												checked="checked"
												class="checkbox"
												name="show-first-letter"
												id="show-first-letter"
												x-on:click="localStorage.setItem('showFirstLetter', JSON.stringify($el.checked));"
											/>
											<span
												class="label-text text-primary"
												>Show the first letter in each
												hidden word</span
											>
										</label>
									</div>
									<div class="form-control w-fit">
										<label
											class="label cursor-pointer flex gap-2 items-center"
											for="checkbox-randomize-hidden-words"
										>
											<input
												x-model="shouldRandomizeOrderOfHiddenWords"
												type="checkbox"
												checked="checked"
												class="checkbox"
												name="checkbox-randomize-hidden-words"
												id="checkbox-randomize-hidden-words"
												x-on:click="localStorage.setItem('shouldRandomizeOrderOfHiddenWords', JSON.stringify($el.checked));"
											/>
											<span
												class="label-text text-primary"
												>Randomize the order of hidden
												words</span
											>
										</label>
									</div>
									<div class="form-control w-fit">
										<label
											class="label cursor-pointer flex gap-2 items-center"
											for="checkbox-show-serif-font"
										>
											<input
												x-model="showSerifFont"
												type="checkbox"
												checked="checked"
												class="checkbox"
												name="checkbox-show-serif-font"
												id="checkbox-show-serif-font"
												x-on:click="localStorage.setItem('showSerifFont', JSON.stringify($el.checked));"
											/>
											<span
												class="label-text text-primary"
												>Use a more decorative font
												(serif)</span
											>
										</label>
									</div>
									<div class="form-control w-fit mt-2">
										<button
											class="btn-sm btn btn-outline text-primary thin-line rounded-full normal-case"
											x-on:click="if (window.confirm('Reload the app?')) { location.reload() }"
											>Reload App</button
										>
									</div>
								</div>
								<footer class="w-full rounded-xl !bg-opacity-10 bg-gray-600 dark:bg-gray-100 mt-2">
									<SectionLinks />
								</footer>
							</NativeFeelingDrawer>
						</div>
					</div>
					<div 
						class="h-6"
						x-data={`{ 
							showInfoSubtext: false, 
							showPassageInfo: true, 
							isNotCurrentVerseOfWeek: ${getVerseFromUrlParams},
						}`.trim()}
						x-init={`
							const millisecondsTilTransition = 3000;
							setTimeout(() => {
								showPassageInfo = false;
							}, millisecondsTilTransition);

							setTimeout(() => {
								showInfoSubtext = true;
							}, millisecondsTilTransition + 500);
						`.trim()}
					>
						<p 
							x-cloak
							x-on:click={`
								showInfoSubtext = false;
								setTimeout(() => {
									showPassageInfo = true;
								}, 500);
							`.trim()}
							x-transition 
							x-show="showInfoSubtext && !isNotCurrentVerseOfWeek" 
							class="cursor-pointer text-muted text-start"
						>
							Scripture memory, together.
						</p>
						<div 
							x-cloak
							x-transition
							x-show="showPassageInfo && !isNotCurrentVerseOfWeek" 
							class="cursor-pointer gap-1 flex text-muted  flex-wrap"
							x-on:click={`
								showPassageInfo = false;
								setTimeout(() => {
									showInfoSubtext = true;
								}, 500);
							`.trim()}
						>
							<p
								class="whitespace-nowrap inline"
								x-show="passageNum > 0"
								x-text="'Passage #' + passageNum + ' • '"
							>
								Passage #--
							</p>
							<p class="whitespace-nowrap inline" x-text=`${nextVerseComesInDays} + ' days until next verse'`>
								Next verse coming on 
							</p>
						</div>
						<p class="text-muted text-start" x-show="isNotCurrentVerseOfWeek" x-transition x-cloak>You are previewing a verse</p>
					</div>
				</div>

				<!-- SCRIPTURE TO MEMORIZE -->
				<section
					id="scripture"
					x-init={`
						scriptureRef = '${scriptureRef}';
						fidelity = fidelityOfTheDay;
					`}
					class="rounded-md text-start max-sm:mx-[-24px]"
				>
					<div
						class="surface-primary p-6 flex justify-center items-center rounded-xl shadow-xl max-sm:shadow-sm max-sm:rounded-3xl transition-[height] duration-300"
						x-ref="scriptureCard"
						x-clear
						x-init={`
							// https://alpinejs.dev/directives/init#next-tick
							$nextTick(() => {
								document.body.classList.add('transition');

								// I have to manually listen to resizes so that I can get and set 
								// the scripture card's dimensions for animation's sake.
								window.addEventListener('resize', () => {
									getAndSetCardWidth($el)
								}, { passive: true });

								getAndSetCardWidth($el);

								// When the showSerifFont state changes, update the localStorage
								$watch('showSerifFont', () => {
									localStorage.setItem('showSerifFont', showSerifFont);
									getAndSetCardWidth($el);
								})
							})

							// https://alpinejs.dev/magics/watch
							$watch('bibleVersionPreference', (prevVal, newVal) => {
								if (prevVal !== newVal) {
									getAndSetCardWidth($el)
								}
							})
						`.trim()}
						x-data={`{ 
							toggleAllowDocumentScroll() {
								document.body.classList.toggle('overflow-hidden');
							},
							getAndSetCardWidth(cardElement) {
								if (this.isFullscreen) {
									return;
								}
								
								cardElement.style.height = '';
								cardElement.style.width = '';

								// Get height of element
								const height = cardElement.offsetHeight;
								const width = cardElement.offsetWidth;

								// Setting the height and width of the element allow for it
								// to animate properly using CSS transitions.
								cardElement.style.height = height + 'px';
								cardElement.style.width = width + 'px';
							},
							handleShowFullscreen() {
								this.toggleAllowDocumentScroll();
								$el.classList.add('!h-screen');
								$el.classList.add('!w-screen');

								window.scrollTo({
									top: 0,
									behavior: "smooth",
								})
								this.isFullscreen = true;
							},
							handleHideFullscreen() {
								const ANIMATION_DURATION = 300
								this.toggleAllowDocumentScroll();
								$el.classList.remove('!h-screen');
								$el.classList.remove('!w-screen');
								this.isFullscreen = false;

								// Allow the close animation to play fully
								setTimeout(() => {
									this.getAndSetCardWidth($el); 
								}, ANIMATION_DURATION)
							},
						}`}
						x-bind:class="{ 'absolute top-0 left-0 bottom-0 right-0 z-30': isFullscreen }"
					>
						<div
							class="max-w-[calc(600px-24px*2)] w-full flex flex-col gap-4"
						>
							<div
								class="w-full flex justify-between gap-6 flex-grow-1"
							>
								<div class="flex items-center">
									<div class="flex gap-0 flex-col">
										<div
											class="flex flex-wrap gap-2 items-baseline text-beautiful-gradient"
										>
											<h1
												x-text="scriptureRef"
												class="text-xl font-medium"
											>
												{scriptureRef}
											</h1>
											<span
												class="text-xl font-medium cursor-pointer"
												x-on:click="$refs.settingsDrawerBtn.click();"
												x-text="bibleVersionPreference"
											></span>
											<div
												class="tooltip tooltip-bottom h-[24px] w-[24px] flex items-center justify-center text-purple-700 dark:text-gray-300"
												x-show="Boolean(bibleVersionData && bibleVersionPreference)"
												x-bind:data-tip="bibleVersionData?.[bibleVersionPreference]?.attribution + ' (Scripture sourced from https://bolls.life/api/)'"
											>
												<svg
													width="16"
													height="16"
													viewBox="0 0 256 256"
													xmlns="http://www.w3.org/2000/svg"
												>
													<path
														fill="currentColor"
														d="M108 84a16 16 0 1 1 16 16a16 16 0 0 1-16-16Zm128 44A108 108 0 1 1 128 20a108.12 108.12 0 0 1 108 108Zm-24 0a84 84 0 1 0-84 84a84.09 84.09 0 0 0 84-84Zm-72 36.68V132a20 20 0 0 0-20-20a12 12 0 0 0-4 23.32V168a20 20 0 0 0 20 20a12 12 0 0 0 4-23.32Z"
													></path>
												</svg>
											</div>
										</div>
									</div>
								</div>

								<!-- Scripture Action Buttons -->
								<div class="text-muted flex gap-3 items-center">
									<!-- Show Fullscreen Button -->
									<button
										x-show="!isFullscreen"
										title="Open fullscreen verse view"
										x-transition
									>
										<svg
											x-on:click="handleShowFullscreen"
											class="cursor-pointer"
											width="24"
											height="24"
											viewBox="0 0 24 24"
											xmlns="http://www.w3.org/2000/svg"
										>
											<g fill="none" fill-rule="evenodd">
												<path
													d="M24 0v24H0V0h24ZM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01l-.184-.092Z"
												></path>
												<path
													fill="currentColor"
													d="M18.5 5.5H16a1.5 1.5 0 0 1 0-3h3A2.5 2.5 0 0 1 21.5 5v3a1.5 1.5 0 0 1-3 0V5.5ZM8 5.5H5.5V8a1.5 1.5 0 1 1-3 0V5A2.5 2.5 0 0 1 5 2.5h3a1.5 1.5 0 1 1 0 3Zm0 13H5.5V16a1.5 1.5 0 0 0-3 0v3A2.5 2.5 0 0 0 5 21.5h3a1.5 1.5 0 0 0 0-3Zm8 0h2.5V16a1.5 1.5 0 0 1 3 0v3a2.5 2.5 0 0 1-2.5 2.5h-3a1.5 1.5 0 0 1 0-3Z"
												></path>
											</g>
										</svg>
									</button>
									<!-- Hide Fullscreen Button -->
									<button
										x-show="isFullscreen"
										title="Dismiss fullscreen verse view"
										x-cloak
										x-transition
									>
										<svg
											x-on:click="handleHideFullscreen"
											class="cursor-pointer"
											width="28"
											height="28"
											viewBox="0 0 24 24"
											xmlns="http://www.w3.org/2000/svg"
										>
											<path
												fill="none"
												stroke="currentColor"
												stroke-linecap="round"
												stroke-linejoin="round"
												stroke-width="2.5"
												d="m7 7l10 10M7 17L17 7"></path>
										</svg>
									</button>
								</div>
							</div>

							<!-- Scripture Verses -->
							<div
								class="relative transition font-scripture"
								x-bind:class="{ 'font-scripture-serif': showSerifFont }"
							>
								<h2
									x-on:visibilitychange.document=`
										if (document.visibilityState === 'hidden') {
											$el.classList.remove('transition-opacity', 'duration-1000');
											$el.classList.add('opacity-0');
										} else {
											$el.classList.add('transition-opacity', 'duration-1000');
											setTimeout(() => $el.classList.remove('opacity-0'), 1000);
										}
									`
									x-ref="scriptureTextEl"
									x-init="$el.classList.remove('opacity-0')"
									id="verse-current"
									x-html="scriptureText"
									class="opacity-0 transition-opacity duration-1000 font-bold text-beautiful-gradient leading-tight"
								>
									{scriptureText}
								</h2>
							</div>

							<!-- Progress Bar -->
							<div
								class="w-full mt-4"
								x-bind:class="{ '!h-fit': showProgressBar }"
								x-data=`{
									showProgressBar: false,
									timeRemaining: 0,
									setOneMinuteTimer() {
										this.showProgressBar = true;
										let currentCount = 0;
										this.timeRemaining = 60;

										const interval = setInterval(() => {
											currentCount += 1;
											$refs.progressBarEl.value = Math.round(100 * (currentCount / 60));

											if (currentCount % 5 === 0) {
												this.timeRemaining = 60 - currentCount;
											}

											if (currentCount >= 60) {
												clearInterval(interval);
												alert("Congrats! You just spent one minute memorizing God's Word");
												this.showProgressBar = false;
											}
										}, 1000)
									},
								}`
							>
								<progress
									x-transition
									x-cloak
									x-show="showProgressBar"
									x-ref="progressBarEl"
									class="z-30 fixed top-0 left-0 right-0 h-2 progress w-full dark:bg-white dark:bg-opacity-10 dark:text-white !text-gray-800 rounded-none"
									value="0"
									max="100"
									x-bind:style="isDarkMode ? '--bc: 0 0% 100%;' : ''"
								></progress>

								<div class="items-center flex gap-3 flex-wrap">
									<!-- Practice Button -->
									<button
										x-bind:disabled="showProgressBar"
										x-bind:class="{ 'btn-disabled !text-opacity-60 dark:text-white': showProgressBar }"
										x-on:click="setOneMinuteTimer()"
										x-text="showProgressBar ? '~' + timeRemaining + 's left' : 'Practice for 1 min'"
										class="btn rounded-full hover:text-gray-800 dark:hover:text-gray-500 bg-gray-700 dark:bg-gray-200 text-white dark:text-gray-800 border-transparent btn-sm w-fit whitespace-nowrap normal-case"
									>
										Practice for 1 min
									</button>

									<a
										x-bind:href="bibleDotComUrl"
										target="_blank"
										class="btn rounded-full btn-sm btn-outline border-gray-200 dark:text-gray-300 dark:border-gray-600 hover:bg-gray-100 hover:text-gray-800 hover:border-transparent dark:hover:bg-white dark:hover:bg-opacity-10 w-fit whitespace-nowrap normal-case"
									>
										Read Full Chapter
									</a>
								</div>
							</div>
						</div>
					</div>

					<!-- Scrubbing Input -->
					<section
						class="w-full mt-12
						max-sm:mx-6 max-sm:w-auto max-sm:mt-8"
					>
						<input
							x-model="fidelity"
							type="range"
							aria-label="Change to hide or show more words in the Bible verse"
							min="0"
							max="60"
							value="0"
							class="range range-md"
							step="10"
						/>
						<div
							class="w-full flex justify-between text-xs px-2 text-muted"
						>
							<span>|</span>
							<span>|</span>
							<span>|</span>
							<span>|</span>
							<span>|</span>
							<span>|</span>
							<span>|</span>
						</div>
						<div
							class="w-[calc(100%+16px)] ms-[-8px] flex justify-between text-xs mt-1 font-mono text-muted"
							x-data="{ dayOfWeek: new Date().getDay() }"
						>
							<span
								class="cursor-pointer p-1 px-2 rounded-md"
								x-on:click="fidelity = 10 * 0"
								x-bind:class="{ 'canvas-tertiary text-primary': dayOfWeek === 0 || dayOfWeek === 7 }"
								>Sun</span
							>
							<span
								class="cursor-pointer p-1 px-2 rounded-md"
								x-on:click="fidelity = 10 * 1"
								x-bind:class="{ 'canvas-tertiary text-primary': dayOfWeek === 1 }"
								>Mon</span
							>
							<span
								class="cursor-pointer p-1 px-2 rounded-md"
								x-on:click="fidelity = 10 * 2"
								x-bind:class="{ 'canvas-tertiary text-primary': dayOfWeek === 2 }"
								>Tue</span
							>
							<span
								class="cursor-pointer p-1 px-2 rounded-md"
								x-on:click="fidelity = 10 * 3"
								x-bind:class="{ 'canvas-tertiary text-primary': dayOfWeek === 3 }"
								>Wed</span
							>
							<span
								class="cursor-pointer p-1 px-2 rounded-md"
								x-on:click="fidelity = 10 * 4"
								x-bind:class="{ 'canvas-tertiary text-primary': dayOfWeek === 4 }"
								>Thu</span
							>
							<span
								class="cursor-pointer p-1 px-2 rounded-md"
								x-on:click="fidelity = 10 * 5"
								x-bind:class="{ 'canvas-tertiary text-primary': dayOfWeek === 5 }"
								>Fri</span
							>
							<span
								class="cursor-pointer p-1 px-2 rounded-md"
								x-on:click="fidelity = 10 * 6"
								x-bind:class="{ 'canvas-tertiary text-primary': dayOfWeek === 6 }"
								>Sat</span
							>
						</div>
					</section>
				</section>

				<div
					class="p-6 rounded-xl canvas-tertiary w-full"
					x-show="showDebug"
					x-transition
					x-cloak
				>
					<pre
						x-text="JSON.stringify($data, null, 2)"
						class="font-mono whitespace-pre text-muted text-start break-all overflow-x-scroll">
					</pre>
				</div>

				<!-- Notification Alert -->
				<div
					x-on:click="notificationAlert = ''"
					x-cloak
					x-transition
					x-show="notificationAlert"
					class="text-primary alert alert-warning dark:bg-red-900 dark:border-red-900 flex-wrap-none fixed z-40 bottom-4 right-4 max-sm:left-4 shadow-xl w-fit max-sm:w-auto max-sm:max-w-full"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						class="stroke-current shrink-0 w-6 h-6"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
						></path>
					</svg>
					<span x-text="notificationAlert"></span>
				</div>

				<!-- Notification Info -->
				<div
					x-on:click="notificationInfo = ''"
					x-cloak
					x-transition
					x-show="notificationInfo"
					class="text-primary alert alert-info surface-primary border-white dark:border-gray-600 flex-wrap-none fixed z-40 bottom-4 right-4 max-sm:left-4 shadow-xl w-fit max-sm:w-auto max-sm:max-w-full"
				>
					<svg
						xmlns="http://www.w3.org/2000/svg"
						fill="none"
						viewBox="0 0 24 24"
						class="stroke-current shrink-0 w-6 h-6"
					>
						<path
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2"
							d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
						></path>
					</svg>
					<span x-text="notificationInfo"></span>
				</div>

				<!-- Subscribe -->
				<div
					class="relative w-full max-sm:mx-[-24px] max-sm:w-screen rounded-xl canvas-tertiary"
					x-ref="subscribeSection"
					x-cloak
					x-show="showSubscribeSection"
				>
					<iframe
						src="https://embeds.beehiiv.com/2f6c51bb-5e19-4053-95f7-d0f01ecd6546"
						data-test-id="beehiiv-embed"
						class="opacity-0 duration-200 transition-opacity w-full rounded-xl canvas-tertiary skeleton"
						height="320"
						title="Subscribe to the Malachi Daily email newsletter"
						frameborder="0"
						scrolling="no"
						style="margin: 0;"
						loading="lazy"
						x-bind:onload="setTimeout(() => { $el.classList.remove('opacity-0') }, 1000)"
					></iframe>
					<!-- Stop Showing Subscribe -->
					<svg
						role="button"
						x-on:click="handleHideSubscribeSection"
						class="cursor-pointer text-white top-6 right-6 absolute"
						width="28"
						height="28"
						viewBox="0 0 24 24"
						xmlns="http://www.w3.org/2000/svg"
					>
						<path
							fill="none"
							stroke="currentColor"
							stroke-linecap="round"
							stroke-linejoin="round"
							stroke-width="2.5"
							d="m7 7l10 10M7 17L17 7"></path>
					</svg>
				</div>
			</div>
		</main>
		<!-- Footer -->
		<footer class="w-full max-sm:rounded-xl safe-area-bottom-padding !bg-opacity-10 bg-gray-800 dark:bg-gray-100">
			<SectionLinks />
		</footer>
	</div>

	<script>
		import { type Alpine as AlpineType } from "alpinejs";
		import {
			requestNotificationPermission,
			messaging,
			getUserFirebaseNotificationToken,
		} from "../messaging_init_on_client.js";
		import { constructBibleDotComChapterURL, type BookName } from '../api/bible/static/books.ts'
		import { removeAlpineAttributes } from "../utils";

		declare global {
			var Alpine: AlpineType;
		}

		async function enableNoSleepMode() {
			try {
				const wakeLock = await navigator.wakeLock.request("screen");
			} catch {
				// Do nothing...
			}
		}

		enableNoSleepMode();

		console.log(
			"🙏".repeat(15) +
				"\n\nWelcome to the console! Jesus loves you.\n\n" +
				"🙏".repeat(15),
		);

		function toggleDarkMode() {
			document.documentElement.classList.toggle("dark");
		}

		// create a function that gets "showFirstLetter" from localStorage
		// if it doesn't exist, set it to true
		const getShowFirstLetter = () => {
			const showFirstLetter = localStorage.getItem("showFirstLetter");
			if (showFirstLetter === null) {
				return false;
			} else {
				return JSON.parse(showFirstLetter);
			}
		};

		// create a function that gets "showSerifFont" from localStorage
		// if it doesn't exist, set it to false
		const getShowSerifFont = () => {
			const showSerifFont = localStorage.getItem("showSerifFont");
			if (showSerifFont === null) {
				return false;
			} else {
				return JSON.parse(showSerifFont);
			}
		};

		const getShowSubscribeSection = () => {
			const showSubscribeSection = localStorage.getItem(
				"showSubscribeSection",
			);
			if (showSubscribeSection === null) {
				return true;
			} else {
				return JSON.parse(showSubscribeSection);
			}
		};

		const getShouldRandomizeOrderOfHiddenWords = () => {
			const shouldRandomizeOrderOfHiddenWords = localStorage.getItem(
				"shouldRandomizeOrderOfHiddenWords",
			);
			if (shouldRandomizeOrderOfHiddenWords === null) {
				return false;
			} else {
				return JSON.parse(shouldRandomizeOrderOfHiddenWords);
			}
		};

		const getIsDarkMode = () => {
			const isDarkMode = localStorage.getItem("isDarkMode");
			if (isDarkMode === null) {
				// Does user's media prefer dark mode?
				if (
					window.matchMedia &&
					window.matchMedia("(prefers-color-scheme: dark)").matches
				) {
					return true;
				}

				return false;
			} else {
				return JSON.parse(isDarkMode);
			}
		};

		if (getIsDarkMode()) {
			toggleDarkMode();
		}

		const getUserBibleVersionPreference = () => {
			const bibleVersionPreference = localStorage.getItem(
				"bibleVersionPreference",
			);
			if (bibleVersionPreference === null) {
				return "NIV";
			} else {
				return JSON.parse(bibleVersionPreference);
			}
		};

		const isUserAgentOniOS = (): boolean => {
			const iOS = window.navigator.userAgent
				.toLowerCase()
				.match(/(iphone|ipad|ipod)/);
			// return boolean
			return iOS ? true : false;
		};

		const getiOSVersion = () => {
			let iOSVersionNumber: number = 0;
			const iOS = window.navigator.userAgent
				.toLowerCase()
				.match(/(iphone|ipad|ipod)/);
			const iOSVersionMatch = /CPU iPhone OS (\d+_\d+)/.exec(
				window.navigator.userAgent,
			);
			iOSVersionNumber = parseFloat(
				iOSVersionMatch?.[1]?.replace("_", ".") || "0.0",
			);

			if (!iOS) {
				// iOS is not detected. Must be using something else.
				return iOSVersionNumber;
			}

			return iOSVersionNumber;
		};

		// Get the Alpine data connected to the DOM.
		document.documentElement.setAttribute("x-data", "malachi");

		document.addEventListener("alpine:init", () => {
			const Alpine = window["Alpine"] || {};
			Alpine.data("malachi", () => ({
				toggleDarkMode: toggleDarkMode,
				isDarkMode: getIsDarkMode(),
				isPWAInstalled: window.matchMedia("(display-mode: standalone)")
					.matches,
				passageNum: 0,
				bookName: '',
				chapter: 0,
				get bibleDotComUrl() {
					const bibleDotComChapterUrl = constructBibleDotComChapterURL({
						book: this.bookName as BookName,
						chapter: this.chapter,
						versionShortCode: this.bibleVersionPreference
					});

					return bibleDotComChapterUrl;
				},
				init() {
					// Set the native operating system badge.
					const setAppBadgeNative = (value: number) => {
						const supportsAppBadge = "setAppBadge" in navigator;
						if (
							supportsAppBadge &&
							matchMedia("(display-mode: standalone)").matches
						) {
							navigator.setAppBadge(value);
						}
					};

					messaging.onMessage((payload) => {
						console.log("message received", payload);
						// Update the UI to include the received message.
						this.notificationInfo =
							`${payload?.notification?.title}: ${payload?.notification?.body}` ||
							"";

						// Send web push notification to the device
						if (this.notificationInfo) {
							// Show the notification
							const notification = new Notification(
								payload?.notification?.title,
								{
									body: payload?.notification?.body,
									icon: "apple-touch-icon.png",
								},
							);

							setAppBadgeNative(1);

							notification.onclick = () => {
								window.focus();
								notification.close();
							};
						}
					});

					getUserFirebaseNotificationToken().then(
						(token) => (this.firebaseCMToken = token),
					);

					removeAlpineAttributes();

					// TODO - here I want to fade in the verse again every time.
					// This runs when the user opens the app/page.
					window.addEventListener("focus", () => {
						setAppBadgeNative(0);

						let lastRefresh = localStorage.getItem("lastRefresh");

						if (!lastRefresh) {
							const lastRefresh = JSON.stringify(Date.now());
							localStorage.setItem("lastRefresh", lastRefresh);
							return;
						}

						const isLastRefreshFromToday = lastRefresh
							? new Date(Number(lastRefresh)).toDateString() ===
							  new Date().toDateString()
							: false;
						const isLastRefreshAnHourOrMoreAgo = Boolean(
							lastRefresh &&
								Date.now() - Number(lastRefresh) > 3600000,
						);

						if (
							!isLastRefreshFromToday ||
							isLastRefreshAnHourOrMoreAgo
						) {
							localStorage.removeItem("lastRefresh");
							window.location.reload();
						}
					});
				},
				showDebug: (() => {
					// Get url param debug = true
					const url = new URL(window.location.href);
					const urlParams = url.searchParams;
					const debug = urlParams.get("debug");
					if (debug === "true") {
						return true;
					}
					return false;
				})(),
				bibleVersionData: undefined,
				bibleVersionPreference: getUserBibleVersionPreference(),
				versesObj: undefined,
				notificationAlert: "",
				notificationInfo: "",
				get scriptureTextOriginal() {
					return this.versesObj?.[this.bibleVersionPreference] || "";
				},
				scriptureRef: "",
				showSerifFont: getShowSerifFont(),
				iOSVersion: getiOSVersion(),
				get isEligibleForNotificationPermission() {
					const IOS_VERSION_WITH_NOTIFICATIONS = 16.4;
					const iOSVersion = getiOSVersion();

					if (!iOSVersion) {
						return true;
					}

					if (iOSVersion < IOS_VERSION_WITH_NOTIFICATIONS) {
						return false;
					}

					return true;
				},
				// TODO fix this and make it show fidelity per day of week
				get fidelityOfTheDay() {
					// Get day of the week as a number from 0 to 6
					const dayOfWeek = new Date().getDay();
					// Turn that into a number from 0 to 6
					let dayOfWeekAsNumber = 0;
					if (dayOfWeek === 7) {
						dayOfWeekAsNumber = 0;
					} else {
						dayOfWeekAsNumber = dayOfWeek;
					}
					return dayOfWeekAsNumber * 10;
				},
				fidelity: 0,
				showFirstLetter: getShowFirstLetter(),
				shouldRandomizeOrderOfHiddenWords:
					getShouldRandomizeOrderOfHiddenWords(),
				showSubscribeSection: getShowSubscribeSection(),
				handleHideSubscribeSection() {
					const subscribeSection = this.$refs.subscribeSection;
					subscribeSection.style.display = "none";
					localStorage.setItem("showSubscribeSection", "false");
				},
				firebaseCMToken: "",
				get isSubscribedToNotifications() {
					return Boolean(
						("Notification" in window &&
							Notification?.permission === "granted") ||
							false,
					);
				},
				isFullscreen: false,
				async handleAskForNotificationPermissions() {
					if (this.isSubscribedToNotifications) {
						this.notificationInfo =
							"Notifications will appear a few times a week";

						if (!("Notification" in window)) {
							return;
						}

						// Instead, show a test notification from the web push api
						const notification = new Notification(
							"This is a Test Notification",
							{
								body: `
									${this.scriptureWithUnderscores}
									— ${this.scriptureRef}
								`.trim(),
								icon: "/logo.png",
							},
						);

						return;
					}

					if (this.isEligibleForNotificationPermission) {
						// Check if the browser supports notifications
						if (!("Notification" in window)) {
							this.notificationInfo =
								"Install this web app to allow notifications. Tap share and click 'Add to Home Screen'";
							return;
						}

						// Check if notification permissions have already been granted
						if (Notification.permission === "granted") {
							return;
						}

						// Request notification permissions
						try {
							const currentToken =
								await requestNotificationPermission();
							this.firebaseCMToken = currentToken;
							this.notificationInfo =
								"Notification permissions granted.";
						} catch (error: Error | any) {
							if (
								error?.message.includes(
									"Can't find variable: Notification",
								)
							) {
								const isUserOniOS = isUserAgentOniOS();
								if (isUserOniOS) {
									this.notificationInfo =
										"Install this web app to allow notifications. Tap share and click 'Add to Home Screen'";
								} else {
									this.notificationInfo =
										"Notifications are not supported on this device.";
								}
							} else {
								if (isUserAgentOniOS()) {
									this.notificationInfo =
										"Please update to the latest iOS version to get notifications.";
								} else {
									this.notificationAlert =
										error?.message ||
										"An error occurred. Please close the app and try again.";
								}
							}
						}
					}
				},
				get scriptureWithUnderscores() {
					return (
						document.getElementById("verse-current")?.innerText ||
						""
					);
				},
				get scriptureText() {
					// Replace some words from the original with underscores for each character
					// but do so where we replace more and more words as fidelity grows
					// when fideltiy is at 0, we just return the original
					// when fidelity is at 60, we return every word with underscores for each character
					const words = this.scriptureTextOriginal.split(" ");

					function convertWordToUnderscores(
						word: string,
						showFirstCharacter: boolean = false,
					): string {
						const wordToBeReplaced =
							word.match(/([A-Za-z]+)/gi)?.[0] || "";

						let underscores = "_".repeat(wordToBeReplaced.length);
						if (showFirstCharacter && word.length > 1) {
							underscores = "_".repeat(
								wordToBeReplaced.length - 1,
							);
						} else if (wordToBeReplaced.length === 1) {
							underscores = "_";
						}

						const makeUnderscoresVisible = () => {
							return `
								<span
									x-data="{ 
										resetText() {
											$el.innerText = '${underscores}'
											$el.classList.remove('opacity-80')
										},
									}"
									class="opacity-40 animate-pulse text-blue-700 dark:text-gray-300"
									x-on:mouseover="
										$el.innerText = '${
											showFirstCharacter &&
											wordToBeReplaced.length > 1
												? wordToBeReplaced.slice(1)
												: wordToBeReplaced
										}'
										$el.classList.add('opacity-80')
									"
									x-on:mouseleave="resetText()"
									x-on:click.outside="resetText()"
								>${underscores}</span>
							`.trim();
						};

						const bookendsOfTheWord = word.replace(
							wordToBeReplaced,
							"{INSERT_UNDERSCORES}",
						);
						const firstCharacter = showFirstCharacter
							? wordToBeReplaced[0] || ""
							: "";
						let replacedWord = bookendsOfTheWord.replace(
							"{INSERT_UNDERSCORES}",
							firstCharacter + makeUnderscoresVisible(),
						);

						if (wordToBeReplaced.length === 1) {
							replacedWord = makeUnderscoresVisible();
						}

						return `
							<span class="text-[inherit] cursor-default align-bottom inline-block whitespace-nowrap rounded-md focus:outline-2 focus:outline-blue-400">
								${replacedWord}
							</span>
						`.trim();
					}

					return words
						.map((word: string, index: number) => {
							const fidelityAsNumber: number = Number(
								this.fidelity,
							);

							if (fidelityAsNumber === 0) {
								return word;
							}

							if (fidelityAsNumber === 60) {
								return convertWordToUnderscores(
									word,
									this.showFirstLetter,
								);
							}

							const percentOfWordsHidden: number =
								fidelityAsNumber / 60;
							const numOfWordsToReplace: number = Math.round(
								percentOfWordsHidden * words.length,
							);

							const indicesToReplace: number[] = [];

							if (this.shouldRandomizeOrderOfHiddenWords) {
								// This function evenly disperses the hidden words
								for (let i = 0; i < words.length; i += 1) {
									const index: number = Math.floor(
										(i * words.length) /
											numOfWordsToReplace,
									);
									indicesToReplace.push(index);
								}
							} else {
								// Otherwise, hide the words from start to finish
								for (let i = 0; i < words.length; i += 1) {
									if (i < numOfWordsToReplace) {
										indicesToReplace.push(i);
									}
								}
							}

							if (indicesToReplace.includes(index)) {
								return convertWordToUnderscores(
									word,
									this.showFirstLetter,
								);
							}

							return word;
						})
						.join(" ");
				},
			}));
		});
	</script>
</Layout>

---
import { Image } from 'astro:assets';

import Layout from '../layouts/Layout.astro';
import logoImgUrl from '../../public/logo.png';

const scriptureText = 'For God so loved the world that he gave his one and only Son, that whoever believes in him shall not perish but have eternal life.';
const scriptureRef = 'John 3:16';
---

<Layout title="Malachi Daily | Simple Scripture Memorization, Together">
	<link rel="preconnect" href="https://fonts.googleapis.com">
	<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
	<link href="https://fonts.googleapis.com/css2?family=Space+Mono:wght@700&display=swap" rel="stylesheet">
	<main class="w-screen h-screen px-6 flex justify-center bg-gray-100">
		<div class="max-w-[600px] w-full flex flex-col py-12 gap-12">
			<!-- LOGO -->
			<div class="w-full flex gap-4 items-center">
				<Image 
					src={logoImgUrl} 
					alt="Malachi Daily Logo | shows hands praying" 
					class={`aspect-[${logoImgUrl.height}/${logoImgUrl.width}] h-[48px] w-fit`}
				/>
				<h2 class="text-3xl text-gray-800 font-bold whitespace-nowrap">Malachi Daily</h2>
			</div>

			<!-- SCRIPTURE TO MEMORIZE -->
			<div
				x-data={`{
					scriptureTextOriginal: '${scriptureText}',
					scriptureRef: '${scriptureRef}',
					// TODO fix this and make it show fidelity per day of week
					get fidelityOfTheDay() {
						// Get day of the week as a number from 0 to 6
						const dayOfWeek = new Date().getDay();
						// Turn that into a number from 0 to 6
						let dayOfWeekAsNumber = 0;
						if (dayOfWeek === 7) {
							dayOfWeekAsNumber = 0;
						} else {
							dayOfWeekAsNumber = dayOfWeek;
						}
						return dayOfWeekAsNumber * 10;	
					},
					fidelity: this.fidelityOfTheDay || 0,
					get scriptureText() {
						// Replace some words from the original with underscores for each character
						// but do so where we replace more and more words as fidelity grows
						// when fideltiy is at 0, we just return the original
						// when fidelity is at 60, we return every word with underscores for each character
						const words = this.scriptureTextOriginal.split(' ');
						return words
							.map((word, index) => {
								const fidelityAsNumber = Number(this.fidelity);
								
								if (fidelityAsNumber === 0) {
									return word
								}

								if (fidelityAsNumber === 60) {
									return '_'.repeat(word.length);
								}

								const percentOfWordsHidden = fidelityAsNumber / 60;
								const numOfWordsToReplace = Math.round(percentOfWordsHidden * words.length)

								const indicesToReplace = []
								for (let i = 0; i < words.length; i += 1) {
									const index = Math.floor(i * words.length / numOfWordsToReplace);
    								indicesToReplace.push(index);
								}

								if (indicesToReplace.includes(index)) {
									return '_'.repeat(word.length);
								}

								return word;
							})
							.join(' ');
					},
				}`}
				id="scripture" 
				x-init="fidelity = fidelityOfTheDay"
				class="relative z-10 max-w-2xl p-4 rounded-md text-center"
			>
				<h1 x-text="scriptureRef" class="text-2xl font-normal mb-4 bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-600">
				</h1>
				<h2 x-text="scriptureText" class="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-600 font-mono tracking-tighter">
				</h2>
				<p x-text="scriptureRef" class="text-2xl font-normal mt-4 bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-600">
				</p>

				<!-- Scrubbing Input -->
				<input x-model="fidelity" type="range" min="0" max="60" value="0" class="range mt-16 range-sm" step="10" />
				<div class="w-full flex justify-between text-xs px-2">
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
				</div>
				<div class="w-full flex justify-between text-xs mt-1 font-mono">
					<span>Sun</span>
					<span>Mon</span>
					<span>Tue</span>
					<span>Wed</span>
					<span>Thu</span>
					<span>Fri</span>
					<span>Sat</span>
				</div>
			</div>
		</div>
	</main>
</Layout>

---
import { Image } from 'astro:assets';

import Layout from '../layouts/Layout.astro';
import logoImgUrl from '../../public/logo.png';

const scriptureText = 'The LORD is my shepherd; I shall not want. He makes me lie down in green pastures. He leads me beside still waters.';
const scriptureRef = 'Psalms 23:1-2 ESV';

export const prerender = true;
---

<Layout title="Malachi Daily | Simple Scripture Memorization, Together">
	<main class="w-screen h-full min-h-screen px-6 flex justify-center bg-gray-100">
		<div class="max-w-[600px] w-full flex flex-col py-12 max-sm:py-6 gap-12 max-sm:gap-6">
			<!-- LOGO -->
			<div class="w-full flex flex-col gap-2 items-center justify-center">
				<div class="w-full flex gap-2 items-center justify-center">
					<Image 
						src={logoImgUrl}
						alt="Malachi Daily Logo | shows hands praying" 
						class={`aspect-[${logoImgUrl.height}/${logoImgUrl.width}] h-[32px] w-fit`}
					/>
					<h2 class="max-sm:text-xl text-3xl text-gray-800 font-bold whitespace-nowrap">Malachi Daily</h2>
				</div>
				<p class="text-gray-500 text-center max-sm:hidden">Scripture memorization, together. New verse every week.</p>
			</div>

			<!-- SCRIPTURE TO MEMORIZE -->
			<section
				x-data="malachi"
				id="scripture" 
				x-init={`
					scriptureTextOriginal = '${scriptureText}';
					scriptureRef = '${scriptureRef}';
					fidelity = fidelityOfTheDay;
				`}
				class="rounded-md text-start"
			>
				<div 
					class="bg-white p-6 rounded-xl shadow-xl flex flex-col items-center justify-center" 
					x-ref="scriptureCard"
					x-data="{ isFullscreen: false }"
				>
					<div class="max-w-[600px] w-full">
						<div class="w-full flex justify-between gap-6 flex-grow-1">
							<h1 x-text="scriptureRef" class="text-xl font-medium mb-4 bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-700">
								{scriptureRef}
							</h1>
							<svg x-show="!isFullscreen" x-on:click="$refs.scriptureCard.requestFullscreen(); isFullscreen = true;" class="cursor-pointer"  width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<g fill="none" fill-rule="evenodd">
									<path d="M24 0v24H0V0h24ZM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01l-.184-.092Z"/>
									<path fill="#000000" d="M18.5 5.5H16a1.5 1.5 0 0 1 0-3h3A2.5 2.5 0 0 1 21.5 5v3a1.5 1.5 0 0 1-3 0V5.5ZM8 5.5H5.5V8a1.5 1.5 0 1 1-3 0V5A2.5 2.5 0 0 1 5 2.5h3a1.5 1.5 0 1 1 0 3Zm0 13H5.5V16a1.5 1.5 0 0 0-3 0v3A2.5 2.5 0 0 0 5 21.5h3a1.5 1.5 0 0 0 0-3Zm8 0h2.5V16a1.5 1.5 0 0 1 3 0v3a2.5 2.5 0 0 1-2.5 2.5h-3a1.5 1.5 0 0 1 0-3Z"/>
								</g>
							</svg>
							<svg x-cloak x-show="isFullscreen" x-on:click="document.exitFullscreen(); isFullscreen = false;" class="cursor-pointer" width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
								<path fill="none" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="m7 7l10 10M7 17L17 7"/>
							</svg>
						</div>
						<div class="relative" x-data="{ timeItTakesToReadVerse: 5000 }">
							<h2
								x-init={`
									setTimeout(() => {
										$el.classList.remove('animate-pulse')
									}, timeItTakesToReadVerse)
								`.trim()}
								id="verse-current"
								x-html="scriptureText" 
								class="animate-pulse transition word-spacing-tight text-4xl max-sm:text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-700 font-scripture tracking-tight leading-tight"
							>
								{scriptureText}
							</h2>
							<p
								x-init={`
									setTimeout(() => {
										$el.classList.add('opacity-0')
									}, timeItTakesToReadVerse)
								`.trim()}
								id="verse-original"
								x-text="scriptureTextOriginal" 
								class="transition absolute top-0 left-0 word-spacing-tight text-4xl max-sm:text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-700 font-scripture tracking-tight leading-tight pointer-events-none"
							>
								{scriptureText}
							</p>
						</div>
					</div>
				</div>

				<!-- Scrubbing Input -->
				<input x-model="fidelity" type="range" min="0" max="60" value="0" class="range mt-12 range-md" step="10" />
				<div class="w-full flex justify-between text-xs px-2">
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
					<span>|</span>
				</div>
				<div class="w-full flex justify-between text-xs mt-1 font-mono">
					<span>Sun</span>
					<span>Mon</span>
					<span>Tue</span>
					<span>Wed</span>
					<span>Thu</span>
					<span>Fri</span>
					<span>Sat</span>
				</div>

				<!-- Toggle Show First Letter -->
				<div class="form-control w-fit mt-6">
					<label class="label cursor-pointer flex gap-2 items-center" for="show-first-letter">
						<input 
							x-model="showFirstLetter" 
							type="checkbox" 
							checked="checked" 
							class="checkbox" 
							name="show-first-letter" 
							id="show-first-letter"
							x-on:click="localStorage.setItem('showFirstLetter', JSON.stringify($el.checked));"
						/>
					  	<span class="label-text">Show the first letter in each hidden word</span> 
					</label>
				</div>				  
			</section>

			<!-- Listen to this as a song -->
			<iframe 
				style="border-radius:12px" 
				src="https://open.spotify.com/embed/track/133ihRulr32OF5ydWZP61g?utm_source=generator&theme=0" 
				width="100%" 
				height="152" 
				frameborder="0" 
				allowfullscreen="" 
				allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
				loading="lazy"
			></iframe>

			<!-- Subscribe -->
			<iframe 
				src="https://embeds.beehiiv.com/c8ce3263-a472-44d8-a911-db5da1e572e2" 
				data-test-id="beehiiv-embed" 
				class="w-full rounded-xl"
				height="320" 
				frameborder="0" 
				scrolling="no" 
				style="margin: 0; background-color: transparent;"
				loading="lazy"
			></iframe>
		</div>
	</main>
	<script>
		import { type Alpine as AlpineType } from 'alpinejs'

		declare global {
			var Alpine: AlpineType
		}

		// create a function that gets "showFirstLetter" from localStorage
		// if it doesn't exist, set it to true
		const getShowFirstLetter = () => {
			const showFirstLetter = localStorage.getItem('showFirstLetter');
			if (showFirstLetter === null) {
				return true;
			} else {
				return JSON.parse(showFirstLetter);
			}
		}

		document.addEventListener('alpine:init', () => {
			const Alpine = window['Alpine'] || {}
			Alpine.data('malachi', () => ({
					scriptureTextOriginal: '',
					scriptureRef: '',
					// TODO fix this and make it show fidelity per day of week
					get fidelityOfTheDay() {
						// Get day of the week as a number from 0 to 6
						const dayOfWeek = new Date().getDay();
						// Turn that into a number from 0 to 6
						let dayOfWeekAsNumber = 0;
						if (dayOfWeek === 7) {
							dayOfWeekAsNumber = 0;
						} else {
							dayOfWeekAsNumber = dayOfWeek;
						}
						return dayOfWeekAsNumber * 10;	
					},
					fidelity: 0,
					showFirstLetter: getShowFirstLetter(),
					get scriptureText() {
						// Replace some words from the original with underscores for each character
						// but do so where we replace more and more words as fidelity grows
						// when fideltiy is at 0, we just return the original
						// when fidelity is at 60, we return every word with underscores for each character
						const words = this.scriptureTextOriginal.split(' ');

						function convertWordToUnderscores(word: string, showFirstCharacter: boolean = false): string {
							const wordToBeReplaced = word.match(/([A-Za-z]+)/ig)?.[0] || ''
							const underscores = showFirstCharacter ? "_".repeat(wordToBeReplaced.length - 1) : "_".repeat(wordToBeReplaced.length)
							const commaOrPeriod = word.replace(wordToBeReplaced, '')
							const firstCharacter = word[0] || ''
							let wordToReturn = '';

							if (showFirstCharacter) {
								if (word.length === 1) {
									wordToReturn = firstCharacter
								} else {
									wordToReturn = firstCharacter + underscores
								}
							} else {
								wordToReturn = underscores
							}

							// return wordToReturn

							// TODO - maybe one day allow for users to type in the words
							return `
								<span 
									class="cursor-default align-bottom overflow-hidden inline-block whitespace-nowrap rounded-md focus:outline-2 focus:outline-blue-400" 
									x-data="{ originalWord: '${wordToBeReplaced}', replacedWord: '${wordToReturn}', wordToShow: '${wordToReturn}${commaOrPeriod}', commaOrPeriod: '${commaOrPeriod}' }"
									x-on:mouseover="wordToShow = originalWord + commaOrPeriod;"
									x-on:mouseleave="wordToShow = replacedWord + commaOrPeriod;"
									x-text="wordToShow"
								>
									${wordToReturn}
								</span>
							`;
						}

						return words
							.map((word: string, index: number) => {
								const fidelityAsNumber: number = Number(this.fidelity);
								
								if (fidelityAsNumber === 0) {
									return word
								}

								if (fidelityAsNumber === 60) {
									return convertWordToUnderscores(word, this.showFirstLetter)
								}

								const percentOfWordsHidden: number = fidelityAsNumber / 60;
								const numOfWordsToReplace: number = Math.round(percentOfWordsHidden * words.length)

								const indicesToReplace: number[] = []
								for (let i = 0; i < words.length; i += 1) {
									const index: number = Math.floor(i * words.length / numOfWordsToReplace);
    								indicesToReplace.push(index);
								}

								if (indicesToReplace.includes(index)) {
									return convertWordToUnderscores(word, this.showFirstLetter)
								}

								return word;
							})
							.join(' ');
					},
			}))
		})
	</script>
</Layout>

---
import { Image } from 'astro:assets';

import Layout from '../layouts/Layout.astro';
import logoImgUrl from '../../public/logo.png';
import { SCRIPTURE_TEXT , SCRIPTURE_REF } from '../utils/constants';
import NativeFeelingDrawer from '../components/react/NativeFeelingDrawer';
import { getVerse, type Verse } from '../api/bible'
import { books, type bibleVersion } from '../api/bible/static/books';

const translation: bibleVersion = 'NIV'
const chapterName =  books.Matthew.name;
const bookId = books[chapterName].bookid;
const chapter = 4;
const verseNum = 4;

const verseRef = `${chapterName} ${chapter}:${verseNum} ${translation}`

let verse = {} as Verse
try {
	verse = await getVerse({
		translation: translation,
		bookId: bookId,
		chapter,
		verse: verseNum
	});
} catch (error) {
	// User backup verse, instead
	console.log(error)
}

const scriptureText = verse?.text || SCRIPTURE_TEXT;
const scriptureRef = verseRef || SCRIPTURE_REF;

// const getTranslations = await getBibleVersesFromMultipleTranslations({
//     bookId: 43,
//     chapterId: 1,
//     verses: [3, 4, 5],
//     translations: ['NIV', 'ESV', 'NLT']
// })

export const prerender = true;
---

<Layout title="Malachi Daily: Memorize Bible Verses & Learn Their Context">
	<div vaul-drawer-wrapper="">
		<main class="w-screen h-full min-h-[calc(100vh-40px)] px-6 flex justify-center bg-gray-100">
			<div class="max-w-[600px] w-full flex flex-col py-12 max-sm:py-6 gap-12 max-sm:gap-6">
				<!-- LOGO -->
				<div class="w-full flex flex-col gap-2 items-start justify-start">
					<div class="w-full flex gap-2 justify-between">
						<div class="flex gap-2 items-center justify-start">
							<Image
								src={logoImgUrl}
								alt="Malachi Daily Logo | shows hands praying" 
								class={`aspect-[${logoImgUrl.height}/${logoImgUrl.width}] h-[32px] w-fit`}
							/>
							<h2 class="max-sm:text-xl text-3xl text-gray-800 font-bold whitespace-nowrap">Malachi Daily</h2>
						</div>
						<!-- Settings and Notifications -->
						<div class="flex gap-4 items-center">
							<svg 
								x-on:click="handleAskForNotificationPermissions" 
								x-data="{ showAnimation: true }"
								x-init="setTimeout(() => showAnimation = false, 2500)"
								x-transition
								x-cloak
								x-bind:class="{ 'animate-bounce': showAnimation && !isSubscribedToNotifications }"
								role="button" 
								class="text-gray-600 flex-shrink-0" 
								width="24" height="24" viewBox="0 0 256 256" xmlns="http://www.w3.org/2000/svg">
								<path fill="currentColor" d="M225.29 165.93C216.61 151 212 129.57 212 104a84 84 0 0 0-168 0c0 25.58-4.59 47-13.27 61.93a20.08 20.08 0 0 0-.07 20.07A19.77 19.77 0 0 0 48 196h36.18a44 44 0 0 0 87.64 0H208a19.77 19.77 0 0 0 17.31-10a20.08 20.08 0 0 0-.02-20.07ZM128 212a20 20 0 0 1-19.6-16h39.2a20 20 0 0 1-19.6 16Zm-73.34-40C63.51 154 68 131.14 68 104a60 60 0 0 1 120 0c0 27.13 4.48 50 13.33 68Z"/>
							</svg>
							<NativeFeelingDrawer client:load>
								<div class="flex flex-col gap-2">
									<div class="form-control w-fit">
										<label class="label cursor-pointer flex gap-2 items-center" for="show-first-letter">
											<input 
												x-model="showFirstLetter" 
												type="checkbox" 
												checked="checked" 
												class="checkbox" 
												name="show-first-letter" 
												id="show-first-letter"
												x-on:click="localStorage.setItem('showFirstLetter', JSON.stringify($el.checked));"
											/>
											<span class="label-text">Show the first letter in each hidden word</span> 
										</label>
									</div>	
									<div class="form-control w-fit">
										<label class="label cursor-pointer flex gap-2 items-center" for=checkbox-randomize-hidden-words">
											<input 
												x-model="shouldRandomizeOrderOfHiddenWords" 
												type="checkbox" 
												checked="checked" 
												class="checkbox" 
												name="checkbox-randomize-hidden-words"
												id="checkbox-randomize-hidden-words"
												x-on:click="localStorage.setItem('shouldRandomizeOrderOfHiddenWords', JSON.stringify($el.checked));"
											/>
											<span class="label-text">Randomize the order of hidden words</span> 
										</label>
									</div>		
								</div>
							</NativeFeelingDrawer>
						</div>
					</div>
					<p class="text-gray-500 text-center max-sm:hidden">Scripture memorization, together. New verse every week.</p>
				</div>

				<div x-show="showDebug" x-transition x-cloak>
					<!-- FIREBASE CLOUD MESSAGING TOKEN -->
					<p 
						x-transition
						x-cloak
						x-show="firebaseCMToken"
						x-text="firebaseCMToken"
						class="whitespace-wrap text-gray-500 text-start break-all"
					></p>

					<!-- IOS VERSION -->
					<p 
						x-transition
						x-cloak
						x-show="iOSVersion"
						x-text="iOSVersion"
						class="whitespace-wrap text-gray-500 text-start break-all"
					></p>

					<p 
						x-data="{ userAgent: '' }" 
						x-init="userAgent = window.navigator.userAgent" 
						x-text="userAgent" 
						x-cloak 
						x-show="userAgent"
						x-transition
					>
					</p>
				</div>

				<!-- SCRIPTURE TO MEMORIZE -->
				<section
					id="scripture" 
					x-init={`
						scriptureTextOriginal = '${scriptureText}';
						scriptureRef = '${scriptureRef}';
						fidelity = fidelityOfTheDay;
					`}
					class="rounded-md text-start"
				>
					<div 
						class="bg-white p-6 flex justify-center items-center rounded-xl shadow-xl transition-[height] duration-300" 
						x-ref="scriptureCard"
						x-init={`
							// https://alpinejs.dev/directives/init#next-tick
							$nextTick(() => {
								document.body.classList.add('transition');

								// I have to manually listen to resizes so that I can get and set 
								// the scripture card's dimensions for animation's sake.
								window.addEventListener('resize', () => {
									getAndSetCardWidth($el)
								}, { passive: true });

								getAndSetCardWidth($el);

								// When the showSerifFont state changes, update the localStorage
								$watch('showSerifFont', () => {
									localStorage.setItem('showSerifFont', showSerifFont);
									getAndSetCardWidth($el);
								})
							})
						`.trim()}
						x-data={`{ 
							isFullscreen: false,
							timeItTakesToReadVerse: 5000,
							toggleAllowDocumentScroll() {
								document.body.classList.toggle('overflow-hidden');
							},
							getAndSetCardWidth(cardElement) {
								if (this.isFullscreen) {
									return;
								}
								
								cardElement.style.height = '';
								cardElement.style.width = '';

								// Get height of element
								const height = cardElement.offsetHeight;
								const width = cardElement.offsetWidth;

								// Setting the height and width of the element allow for it
								// to animate properly using CSS transitions.
								cardElement.style.height = height + 'px';
								cardElement.style.width = width + 'px';
							},
							handleShowFullscreen() {
								this.toggleAllowDocumentScroll();
								$el.classList.add('!h-screen');
								$el.classList.add('!w-screen');
								window.scrollTo({
									top: 0,
									behavior: "smooth",
								})
								this.isFullscreen = true;
							},
							handleHideFullscreen() {
								const ANIMATION_DURATION = 300
								this.toggleAllowDocumentScroll();
								$el.classList.remove('!h-screen');
								$el.classList.remove('!w-screen');
								this.isFullscreen = false;

								// Allow the close animation to play fully
								setTimeout(() => {
									this.getAndSetCardWidth($el); 
								}, ANIMATION_DURATION)
							},
						}`}
						x-bind:class="{ 'absolute top-0 left-0 bottom-0 right-0 z-10': isFullscreen }"
					>
						<div class="max-w-[calc(600px-24px*2)] w-full flex flex-col gap-4">
							<div class="w-full flex justify-between gap-6 flex-grow-1">
								<h1 x-text="scriptureRef" class="text-xl font-medium bg-clip-text text-transparent bg-gradient-to-r from-blue-500 to-purple-700">
									{scriptureRef}
								</h1>

								<!-- Scripture Action Buttons -->
								<div class="text-gray-500 flex gap-3 items-center">
									<!-- Change Font Button -->
									<svg role="button" x-show="!isFullscreen" x-on:click="showSerifFont = !showSerifFont" class="cursor-pointer" width="28px" height="28px" stroke-width="2.5" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" color="currentColor">
										<path d="M3.46875 18.3744L4.53321 16.0325M14.1134 18.3744L13.0489 16.0325M13.0489 16.0325L8.79105 6.66528L4.53321 16.0325M13.0489 16.0325H4.53321" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"></path>
										<path d="M15.1777 8.79421C15.1777 5.06857 21.0323 5.0686 21.0323 8.79421C21.0323 11.4554 18.3711 10.9231 18.3711 14.1164" stroke="currentColor" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"></path><path d="M18.3711 18.385L18.3817 18.3732" stroke="#000000" stroke-width="2.5" stroke-linecap="round" stroke-linejoin="round"></path>
									</svg>
									<!-- Show Fullscreen Button -->
									<svg role="button" x-show="!isFullscreen" x-on:click="handleShowFullscreen" class="cursor-pointer"  width="24" height="24" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
										<g fill="none" fill-rule="evenodd">
											<path d="M24 0v24H0V0h24ZM12.593 23.258l-.011.002l-.071.035l-.02.004l-.014-.004l-.071-.035c-.01-.004-.019-.001-.024.005l-.004.01l-.017.428l.005.02l.01.013l.104.074l.015.004l.012-.004l.104-.074l.012-.016l.004-.017l-.017-.427c-.002-.01-.009-.017-.017-.018Zm.265-.113l-.013.002l-.185.093l-.01.01l-.003.011l.018.43l.005.012l.008.007l.201.093c.012.004.023 0 .029-.008l.004-.014l-.034-.614c-.003-.012-.01-.02-.02-.022Zm-.715.002a.023.023 0 0 0-.027.006l-.006.014l-.034.614c0 .012.007.02.017.024l.015-.002l.201-.093l.01-.008l.004-.011l.017-.43l-.003-.012l-.01-.01l-.184-.092Z"/>
											<path fill="currentColor" d="M18.5 5.5H16a1.5 1.5 0 0 1 0-3h3A2.5 2.5 0 0 1 21.5 5v3a1.5 1.5 0 0 1-3 0V5.5ZM8 5.5H5.5V8a1.5 1.5 0 1 1-3 0V5A2.5 2.5 0 0 1 5 2.5h3a1.5 1.5 0 1 1 0 3Zm0 13H5.5V16a1.5 1.5 0 0 0-3 0v3A2.5 2.5 0 0 0 5 21.5h3a1.5 1.5 0 0 0 0-3Zm8 0h2.5V16a1.5 1.5 0 0 1 3 0v3a2.5 2.5 0 0 1-2.5 2.5h-3a1.5 1.5 0 0 1 0-3Z"/>
										</g>
									</svg>
									<!-- Hide Fullscreen Button -->
									<svg role="button" x-cloak x-show="isFullscreen" x-on:click="handleHideFullscreen" class="cursor-pointer" width="28" height="28" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
										<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="m7 7l10 10M7 17L17 7"/>
									</svg>
								</div>
							</div>

							<!-- Scripture Verses -->
							<div x-ref="scriptureText" class="relative transition font-scripture" x-bind:class="{ 'font-scripture-serif': showSerifFont }">
								<h2
									x-init={`
										setTimeout(() => {
											$el.classList.remove('opacity-0')
										}, 150)
									`.trim()}
									x-transition
									x-show="scriptureText"
									id="verse-current"
									x-html="scriptureText" 
									class="opacity-0 transition duration-1000 font-bold bg-clip-text text-transparent bg-gradient-to-r from-blue-600 to-purple-700 leading-tight"
								>
									{scriptureText}
								</h2>
							</div>
						</div>
					</div>

					<!-- Scrubbing Input -->
					<input x-model="fidelity" type="range" min="0" max="60" value="0" class="range mt-12 range-md" step="10" />
					<div class="w-full flex justify-between text-xs px-2">
						<span>|</span>
						<span>|</span>
						<span>|</span>
						<span>|</span>
						<span>|</span>
						<span>|</span>
						<span>|</span>
					</div>
					<div class="w-full flex justify-between text-xs mt-1 font-mono">
						<span>Sun</span>
						<span>Mon</span>
						<span>Tue</span>
						<span>Wed</span>
						<span>Thu</span>
						<span>Fri</span>
						<span>Sat</span>
					</div>			  
				</section>

				<!-- Notification Alert -->
				<div x-on:click="notificationAlert = ''" x-cloak x-transition x-show="notificationAlert" class="alert alert-warning flex-wrap-none fixed z-10 bottom-4 right-4 max-sm:left-4 shadow-xl w-fit max-sm:w-auto max-w-[400px]">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
					<span x-text="notificationAlert"></span>
				</div>

				<!-- Notification Info -->
				<div x-on:click="notificationInfo = ''" x-cloak x-transition x-show="notificationInfo" class="alert alert-info flex-wrap-none fixed z-10 bottom-4 right-4 max-sm:left-4 shadow-xl w-fit max-sm:w-auto max-w-[400px]">
					<svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" class="stroke-current shrink-0 w-6 h-6">
						<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
					</svg>
					<span x-text="notificationInfo"></span>
				</div>

				<!-- Listen to this as a song -->
				<!-- <iframe 
					style="border-radius:12px" 
					src="https://open.spotify.com/embed/track/133ihRulr32OF5ydWZP61g?utm_source=generator&theme=0" 
					width="100%" 
					height="152" 
					frameborder="0" 
					allowfullscreen="" 
					allow="autoplay; clipboard-write; encrypted-media; fullscreen; picture-in-picture" 
					loading="lazy"
				></iframe> -->

				<!-- Subscribe -->
				<div class="relative w-full" x-ref="subscribeSection" x-cloak x-show="showSubscribeSection">
					<iframe 
						src="https://embeds.beehiiv.com/c8ce3263-a472-44d8-a911-db5da1e572e2" 
						data-test-id="beehiiv-embed" 
						class="w-full rounded-xl"
						height="320" 
						frameborder="0" 
						scrolling="no" 
						style="margin: 0; background-color: transparent;"
						loading="lazy"
					></iframe>
					<!-- Stop Showing Subscribe -->
					<svg role="button" x-on:click="handleHideSubscribeSection" class="cursor-pointer top-6 right-6 absolute" width="28" height="28" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
						<path fill="none" stroke="currentColor" stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="m7 7l10 10M7 17L17 7"/>
					</svg>
				</div>
			</div>
		</main>

		<footer class="w-full flex justify-center gap-6 flex-wrap py-2 text-gray-300 bg-gray-700">
			<a 
				class="link whitespace-nowrap"
				x-data={`{
					createEmailLink() {
						// Set up the email link for getting help
						const helpEmailLink = new URL('mailto:cameronandrewpak+malachidaily@gmail.com');
						helpEmailLink.searchParams.set('cc', 'hello@malachidaily.com');
						helpEmailLink.searchParams.set('subject', encodeURIComponent('Malachi Daily Help Request'));
						let emailBody = '';
						emailBody += 'I want help with the following:\\n\\n';
						emailBody += '{Write about what you need help with here}\\n\\n';
						emailBody += '—Below is some necessary data to help debug any issues:—'
						emailBody += '\\n• Scripture Ref: ' + scriptureRef;
						emailBody += '\\n• Scripture: ' + scriptureTextOriginal;
						emailBody += '\\n• User Agent: ' + window.navigator.userAgent;
						helpEmailLink.searchParams.set('body', encodeURIComponent(emailBody));
						return decodeURIComponent(helpEmailLink.href)
					},
					emailLink: ''
				}`}
				x-init="emailLink = createEmailLink()"
				x-bind:href="emailLink"
				target="_blank"
			>
				Need help?
			</a>
			<a class="link whitespace-nowrap" href="mailto:hello@malachidaily.com" target="_blank">Contact Us</a>
			<a class="link whitespace-nowrap" href="https://malachidaily.com" target="_blank">Visit Main Website</a>
		</footer>
	</div>
	
	<script>
		import { type Alpine as AlpineType } from 'alpinejs'
		import { onMessage } from "firebase/messaging";
		import { requestNotificationPermission, messaging } from '../messaging_init_in_sw.js'

		declare global {
			var Alpine: AlpineType
		}

		// create a function that gets "showFirstLetter" from localStorage
		// if it doesn't exist, set it to true
		const getShowFirstLetter = () => {
			const showFirstLetter = localStorage.getItem('showFirstLetter');
			if (showFirstLetter === null) {
				return true;
			} else {
				return JSON.parse(showFirstLetter);
			}
		}

		// create a function that gets "showSerifFont" from localStorage
		// if it doesn't exist, set it to false
		const getShowSerifFont = () => {
			const showSerifFont = localStorage.getItem('showSerifFont');
			if (showSerifFont === null) {
				return false;
			} else {
				return JSON.parse(showSerifFont);
			}
		}

		const getShowSubscribeSection = () => {
			const showSubscribeSection = localStorage.getItem('showSubscribeSection');
			if (showSubscribeSection === null) {
				return true;
			} else {
				return JSON.parse(showSubscribeSection);
			}
		}

		const getShouldRandomizeOrderOfHiddenWords = () => {
			const shouldRandomizeOrderOfHiddenWords = localStorage.getItem('shouldRandomizeOrderOfHiddenWords');
			if (shouldRandomizeOrderOfHiddenWords === null) {
				return true;
			} else {
				return JSON.parse(shouldRandomizeOrderOfHiddenWords);
			}
		}

		const isUserAgentOniOS = (): boolean => {
			const iOS = window.navigator.userAgent.toLowerCase().match(/(iphone|ipad|ipod)/);
			console.log(iOS)
			// return boolean
			return iOS ? true : false
		}

		const getiOSVersion = () => {
			let iOSVersionNumber: number = 0;
			const iOS = window.navigator.userAgent.toLowerCase().match(/(iphone|ipad|ipod)/);
			const iOSVersionMatch = /CPU iPhone OS (\d+_\d+)/.exec(window.navigator.userAgent);
			iOSVersionNumber = parseFloat(iOSVersionMatch?.[1]?.replace('_', '.') || '0.0');
			
			if (!iOS) {
				// iOS is not detected. Must be using something else.
				return iOSVersionNumber
			}

			return iOSVersionNumber
		}

		// Add this to the body tag
		document.body.setAttribute('x-data', 'malachi');

		document.addEventListener('alpine:init', () => {
			const Alpine = window['Alpine'] || {}
			Alpine.data('malachi', () => ({
				init() {
					// Handle incoming messages. Called when:
					// - a message is received while the app has focus
					// - the user clicks on an app notification created by a service worker
					//   `messaging.onBackgroundMessage` handler.
					onMessage(messaging, (payload) => {
						// Update the UI to include the received message.
						this.notificationInfo = payload?.data?.message || '';
					});
				},
				showDebug: (() => {
					// Get url param debug = true
					const url = new URL(window.location.href);
					const urlParams = url.searchParams
					const debug = urlParams.get('debug');
					if (debug === 'true') {
						return true
					}
					return false
				})(),
				notificationAlert: '',
				notificationInfo: '',
				scriptureTextOriginal: '',
				scriptureRef: '',
				showSerifFont: getShowSerifFont(),
				iOSVersion: getiOSVersion(),
				get isEligibleForNotificationPermission() {
					const IOS_VERSION_WITH_NOTIFICATIONS = 16.4;
					const iOSVersion = getiOSVersion();
					
					if (!iOSVersion) {
						return true;
					}

					if (iOSVersion < IOS_VERSION_WITH_NOTIFICATIONS) {
						return false;
					}

					window.alert('Can get notifications!')
					
					return true;
				},
				// TODO fix this and make it show fidelity per day of week
				get fidelityOfTheDay() {
					// Get day of the week as a number from 0 to 6
					const dayOfWeek = new Date().getDay();
					// Turn that into a number from 0 to 6
					let dayOfWeekAsNumber = 0;
					if (dayOfWeek === 7) {
						dayOfWeekAsNumber = 0;
					} else {
						dayOfWeekAsNumber = dayOfWeek;
					}
					return dayOfWeekAsNumber * 10;	
				},
				fidelity: 0,
				showFirstLetter: getShowFirstLetter(),
				shouldRandomizeOrderOfHiddenWords: getShouldRandomizeOrderOfHiddenWords(),
				showSubscribeSection: getShowSubscribeSection(),
				handleHideSubscribeSection() {
					const subscribeSection = this.$refs.subscribeSection;
					subscribeSection.style.display = 'none';
					localStorage.setItem('showSubscribeSection', 'false');
				},
				firebaseCMToken: '',
				get isSubscribedToNotifications() {
					return Boolean(('Notification' in window && Notification?.permission === 'granted') || false)
				},
				async handleAskForNotificationPermissions() {
					if (this.isSubscribedToNotifications) {
						// Instead, show a test notification from the web push api
						const notification = new Notification('This is a Test Notification', {
							body: `
								${this.scriptureWithUnderscores}
								— ${this.scriptureRef}
							`.trim(),
							icon: '/logo.png',
						});
						return;
					}

					if (this.isEligibleForNotificationPermission) {
						// Check if the browser supports notifications
						if (!('Notification' in window)) {
							this.notificationInfo = "Install this web app to allow notifications. Tap share and click 'Add to Home Screen'";
							return;
						}

						// Check if notification permissions have already been granted
						if (Notification.permission === 'granted') {
							return;
						}

						// Request notification permissions
						try {
							const currentToken = await requestNotificationPermission();
							this.firebaseCMToken = currentToken
							this.notificationInfo = "Notification permissions granted."
						} catch (error: Error | any) {
							if (error?.message.includes("Can't find variable: Notification")) {
								const isUserOniOS = isUserAgentOniOS()
								if (isUserOniOS) {
									this.notificationInfo = "Install this web app to allow notifications. Tap share and click 'Add to Home Screen'"
								} else {
									this.notificationInfo = "Notifications are not supported on this device."
								}
							} else {
								if (isUserAgentOniOS()) {
									this.notificationInfo = "Please update to the latest iOS version to get notifications."
								}  else {
									this.notificationAlert = error?.message || 'An error occurred. Please close the app and try again.' 
								}
							}
						}
					}
				},
				get scriptureWithUnderscores() {
					return document.getElementById('verse-current')?.innerText || ''
				},
				get scriptureText() {
					// Replace some words from the original with underscores for each character
					// but do so where we replace more and more words as fidelity grows
					// when fideltiy is at 0, we just return the original
					// when fidelity is at 60, we return every word with underscores for each character
					const words = this.scriptureTextOriginal.split(' ');

					function convertWordToUnderscores(word: string, showFirstCharacter: boolean = false): string {
						const wordToBeReplaced = word.match(/([A-Za-z]+)/ig)?.[0] || ''						
						
						let underscores = "_".repeat(wordToBeReplaced.length)
						if (showFirstCharacter) {
							underscores = "_".repeat(wordToBeReplaced.length - 1) 
						} else if (wordToBeReplaced.length === 1) {
							underscores = "_"
						}

						const makeUnderscoresVisible = () => {
							return `
								<span
									x-data="{ 
										resetText() {
											$el.innerText = '${underscores}'
											$el.classList.remove('opacity-80')
										},
									}"
									class="opacity-40 animate-pulse text-blue-700"
									x-on:mouseover="
										$el.innerText = '${showFirstCharacter ? wordToBeReplaced.slice(1) : wordToBeReplaced}'
										$el.classList.add('opacity-80')
									"
									x-on:mouseleave="resetText()"
									x-on:click.outside="resetText()"
								>${underscores}</span>
							`.trim()
						}

						const bookendsOfTheWord = word.replace(wordToBeReplaced, '{INSERT_UNDERSCORES}')
						const firstCharacter = showFirstCharacter ? (wordToBeReplaced[0] || '') : ''
						const replacedWord = bookendsOfTheWord.replace('{INSERT_UNDERSCORES}', firstCharacter + makeUnderscoresVisible())

						return `
							<span class="text-[inherit] cursor-default align-bottom inline-block whitespace-nowrap rounded-md focus:outline-2 focus:outline-blue-400">
								${replacedWord}
							</span>
						`.trim();
					}

					return words
						.map((word: string, index: number) => {
							const fidelityAsNumber: number = Number(this.fidelity);
							
							if (fidelityAsNumber === 0) {
								return word
							}

							if (fidelityAsNumber === 60) {
								return convertWordToUnderscores(word, this.showFirstLetter)
							}

							const percentOfWordsHidden: number = fidelityAsNumber / 60;
							const numOfWordsToReplace: number = Math.round(percentOfWordsHidden * words.length)

							const indicesToReplace: number[] = []

							if (this.shouldRandomizeOrderOfHiddenWords) {
								// This function evenly disperses the hidden words
								for (let i = 0; i < words.length; i += 1) {
									const index: number = Math.floor(i * words.length / numOfWordsToReplace);
									indicesToReplace.push(index);
								}
							} else {
								// Otherwise, hide the words from start to finish
								for (let i = 0; i < words.length; i += 1) {
									if (i < numOfWordsToReplace) {
										indicesToReplace.push(i);
									}
								}
							}


							if (indicesToReplace.includes(index)) {
								return convertWordToUnderscores(word, this.showFirstLetter)
							}

							return word;
						})
						.join(' ');
				},
			}))
		})
	</script>
</Layout>
